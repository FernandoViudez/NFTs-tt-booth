{"version":3,"sources":["lib/nft.ts","lib/metadata.ts","lib/config.ts","lib/ipfs.ts","MediaDisplay.tsx","Picker.tsx","Uploader.tsx","Minter.tsx","EventMints.tsx","AlgorandWalletConnector.tsx","App.tsx","index.tsx","lib/algorand.ts"],"names":["ARC3_URL_SUFFIX","METADATA_FILE","JSON_TYPE","ipfsURL","cid","resolveProtocol","activeConf","url","endsWith","slice","length","chunks","split","conf","ipfsGateway","mediaIntegrity","file","a","arrayBuffer","buff","bytes","Uint8Array","hash","sha256","digest","Buffer","from","toString","Token","t","id","name","unitName","metadataHash","total","decimals","creator","manager","reserve","clawback","freeze","defaultFrozen","this","p","params","index","NFT","md","token","urlMimeType","metadata","Metadata","valid","mediaURL","substring","wallet","createToken","asset_id","fromAssetId","assetId","getToken","fromToken","fromParams","getMimeTypeFromIpfs","getMetaFromIpfs","getTypeFromMimeType","filetype","type","omitRawAndEmpty","k","v","args","_raw","undefined","description","image","image_integrity","image_mimetype","background_color","external_url","external_url_integrity","external_url_mimetype","animation_url","animation_url_integrity","animation_url_mimetype","extra_metadata","localization","properties","Object","assign","fmt","hasOwnProperty","create","update","md_blob","Blob","File","title","JSON","stringify","parse","mimeType","require","eventConfs","activeConfKey","sessionGetActiveConf","ac","sessionStorage","getItem","parseInt","sessionSetActiveConf","setItem","getEventConfig","ec","event","storageClient","getStorageClient","Web3Storage","process","putToIPFS","storage","put","wrapWithDirectory","mediaAdded","integ","mdc","mediaType","mdobj","toFile","listRecentFiles","ms_threshold","w3s","options","list","maxResults","upload","Date","created","push","getIpfsUrlFromCID","req","Request","method","fetch","resp","headers","get","blob","body","text","parsed","console","error","MediaDisplay","props","media","controls","src","mediaSrc","alt","className","MAX_DELTA","cards","Picker","React","useState","setOptions","initialized","setInitialized","activeConfig","opts","mime_type_promises","opt","Promise","all","idx","mimeTypes","new_opts","md_promises","metas","filtered","useEffect","getRecentFiles","then","map","option","DisplayCard","cidmd","sw","connected","to","elevation","Elevation","TWO","Uploader","meta","setMeta","setTitle","loading","setLoading","fileObj","setFileObj","setMediaSrc","setMimeType","setUnitName","assetName","setAssetName","form","set","alert","getFullYear","window","location","reload","onInputChange","target","value","UploadContainer","mediaTitle","setFile","reader","FileReader","onload","e","result","readAsDataURL","metaObj","size","onChange","placeholder","intent","style","float","margin","onClick","large","disabled","stopPropagation","preventDefault","files","item","Minter","useParams","setMd","importingAccount","setImportingAccount","nft","setNFT","fundLoading","setFundLoading","popupOpen","setPopupOpen","createdId","setCreatedId","resetAllStates","errorMssg","addr","xferAsset","href","acct","algosdk","generateAccount","fundAccount","NFTCard","mintOnly","mintAndCreate","AccountImporter","cancelCreate","continueCreate","AddressReader","optIn","handleScanned","isOpen","DIALOG_BODY","THREE","icon","setIsOpen","mn","setMn","ic","secretKeyToMnemonic","sk","DIALOG_FOOTER","vref","useRef","scanner","setScanner","open","stop","start","seen","onOpened","current","QrScanner","data","width","ref","WORKER_PATH","EventMints","nfts","setNfts","loadedName","setLoadedName","nftPromises","asaList","asa","n","nftList","AlgorandWalletConnector","selectorOpen","setSelectorOpen","sessionWallet","updateWallet","handleSelectedWallet","choice","currentTarget","allowedWallets","disconnect","SessionWallet","network","permissionCallback","connect","interval","success","setInterval","clearInterval","walletOptions","entries","fill","minimal","outlined","img","darkMode","displayName","rightIcon","onClose","Classes","addr_list","accts","substr","setAccountIndex","iconProps","defaultValue","accountIndex","App","setSessionWallet","accountList","setAccounts","setConnected","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","path","element","history","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","getClient","Algodv2","algod","getDefaultAccount","getSuggested","suggested","create_txn","makeAssetCreateTxnWithSuggestedParamsFromObject","assetURL","assetMetadataHash","toHash","suggestedParams","signTxn","create_txn_s","sendWait","fund_txn","makePaymentTxnWithSuggestedParamsFromObject","amount","optin_txn","makeAssetTransferTxnWithSuggestedParamsFromObject","assetIndex","xfer_txn","grouped","assignGroupID","fund_txn_s","xfer_txn_s","optin_txn_s","signTransaction","rx","rounds","getTransactionParams","do","txParams","lastRound","getAssetByID","signed","client","sendRawTransaction","txId","waitForConfirmation"],"mappings":"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","file":"static/js/main.81bad338.chunk.js","sourcesContent":["import { createToken, getToken } from \"./algorand\";\r\nimport { getMimeTypeFromIpfs, getMetaFromIpfs } from \"./ipfs\";\r\nimport { sha256 } from \"js-sha256\";\r\nimport { Wallet } from \"algorand-session-wallet\";\r\nimport { conf } from \"./config\";\r\nimport { Metadata } from \"./metadata\";\r\n\r\n/*\r\n\r\nThe following is a class and metadata type to support the ARC-0003 standard \r\nset forth by the Algorand Foundation and Community\r\n\r\nhttps://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0003.md\r\n\r\n*/\r\n\r\nexport const ARC3_NAME_SUFFIX = \"@arc3\";\r\nexport const ARC3_URL_SUFFIX = \"#arc3\";\r\nexport const METADATA_FILE = \"metadata.json\";\r\nexport const JSON_TYPE = \"application/json\";\r\n\r\nexport function asaURL(cid: string): string {\r\n  return ipfsURL(cid) + ARC3_URL_SUFFIX;\r\n}\r\nexport function ipfsURL(cid: string): string {\r\n  return \"ipfs://\" + cid;\r\n}\r\nexport function fileURL(activeConf: number, cid: string, name: string): string {\r\n  return conf[activeConf].ipfsGateway + cid + \"/\" + name;\r\n}\r\n\r\nexport function resolveProtocol(activeConf: number, url: string): string {\r\n  if (url.endsWith(ARC3_URL_SUFFIX))\r\n    url = url.slice(0, url.length - ARC3_URL_SUFFIX.length);\r\n\r\n  const chunks = url.split(\"://\");\r\n\r\n  // No protocol specified, give up\r\n  if (chunks.length < 2) return url;\r\n\r\n  //Switch on the protocol\r\n  switch (chunks[0]) {\r\n    case \"ipfs\": //Its ipfs, use the configured gateway\r\n      return conf[activeConf].ipfsGateway + chunks[1];\r\n    case \"https\": //Its already http, just return it\r\n      return url;\r\n    // TODO: Future options may include arweave or algorand\r\n  }\r\n\r\n  return url;\r\n}\r\n\r\nexport async function mediaIntegrity(file: File): Promise<string> {\r\n  const buff = await file.arrayBuffer();\r\n  const bytes = new Uint8Array(buff);\r\n  const hash = new Uint8Array(sha256.digest(bytes));\r\n  return \"sha256-\" + Buffer.from(hash).toString(\"base64\");\r\n}\r\n\r\nexport class Token {\r\n  id: number;\r\n\r\n  name: string;\r\n  unitName: string;\r\n  url: string;\r\n\r\n  metadataHash: string;\r\n\r\n  total: number;\r\n  decimals: number;\r\n\r\n  creator: string;\r\n\r\n  manager: string;\r\n  reserve: string;\r\n  clawback: string;\r\n  freeze: string;\r\n\r\n  defaultFrozen: boolean;\r\n\r\n  constructor(t: any) {\r\n    this.id = t.id || 0;\r\n    this.name = t.name || \"\";\r\n    this.unitName = t.unitName || \"\";\r\n    this.url = t.url || \"\";\r\n\r\n    this.metadataHash = t.metadataHash || \"\";\r\n\r\n    this.total = t.total || 0;\r\n    this.decimals = t.decimals || 0;\r\n\r\n    this.creator = t.creator || \"\";\r\n\r\n    this.manager = t.manager || \"\";\r\n    this.reserve = t.reserve || \"\";\r\n    this.clawback = t.clawback || \"\";\r\n    this.freeze = t.freeze || \"\";\r\n\r\n    this.defaultFrozen = t.defaultFrozen || false;\r\n  }\r\n\r\n  static fromParams(t: any): Token {\r\n    const p = t.params;\r\n    return new Token({\r\n      id: t.index,\r\n      name: p.name || \"\",\r\n      unitName: p[\"unit-name\"] || \"\",\r\n      url: p.url || \"\",\r\n      metadataHash: p[\"metadata-hash\"] || \"\",\r\n      total: p.total || 0,\r\n      decimals: p.decimals || 0,\r\n      creator: p.creator || \"\",\r\n      manager: p.manager || \"\",\r\n      reserve: p.reserve || \"\",\r\n      clawback: p.clawback || \"\",\r\n      freeze: p.freeze || \"\",\r\n      defaultFrozen: p[\"default-frozen\"] || false,\r\n    }) as Token;\r\n  }\r\n\r\n  valid(): boolean {\r\n    return this.id > 0 && this.total > 0 && this.url !== \"\";\r\n  }\r\n}\r\n\r\nexport class NFT {\r\n  token: Token = new Token({});\r\n  metadata: Metadata = new Metadata();\r\n\r\n  urlMimeType: string;\r\n\r\n  constructor(md: Metadata, token?: Token, urlMimeType?: string) {\r\n    this.metadata = md;\r\n    this.token = token;\r\n    this.urlMimeType = urlMimeType;\r\n  }\r\n\r\n  static async create(\r\n    wallet: Wallet,\r\n    activeConf: number,\r\n    md: Metadata,\r\n    cid: string\r\n  ): Promise<NFT> {\r\n    const asset_id = await createToken(wallet, activeConf, ipfsURL(cid), md);\r\n    return await NFT.fromAssetId(activeConf, asset_id);\r\n  }\r\n\r\n  static async fromAssetId(activeConf: number, assetId: number): Promise<NFT> {\r\n    return NFT.fromToken(activeConf, await getToken(activeConf, assetId));\r\n  }\r\n\r\n  static async fromToken(activeConf: number, t: any): Promise<NFT> {\r\n    const token = Token.fromParams(t);\r\n    const url = resolveProtocol(activeConf, token.url);\r\n\r\n    //TODO: provide getters for other storage options\r\n    // arweave? note field?\r\n\r\n    try {\r\n      const urlMimeType = await getMimeTypeFromIpfs(url);\r\n\r\n      switch (urlMimeType) {\r\n        case JSON_TYPE:\r\n          return new NFT(await getMetaFromIpfs(url), token, urlMimeType);\r\n      }\r\n\r\n      return new NFT(Metadata.fromToken(token), token, urlMimeType);\r\n    } catch (error) {\r\n      return new NFT(new Metadata(), token);\r\n    }\r\n  }\r\n\r\n  valid(): boolean {\r\n    return this.token.valid() && this.metadata.valid();\r\n  }\r\n\r\n  name(): string {\r\n    if (this.metadata.valid()) {\r\n      return this.metadata.name;\r\n    }\r\n    if (this.token.valid()) {\r\n      return this.token.name;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  id(): number {\r\n    return this.token.valid() ? this.token.id : 0;\r\n  }\r\n\r\n  mediaURL(activeConf: number): string {\r\n    if (!this.valid()) return \"https://dummyimage.com/640x360/fff/aaa\";\r\n\r\n    // Try to resolve the protocol, if one is set\r\n    const url = resolveProtocol(activeConf, this.metadata.mediaURL());\r\n\r\n    // If the url is different, we resolved it correctly\r\n    if (url !== this.metadata.mediaURL()) return url;\r\n\r\n    // It may be a relative url stored within the same directory as the metadata file\r\n    // Lop off the METADATA_FILE bit and append image path\r\n    if (this.token.url.endsWith(METADATA_FILE)) {\r\n      const dir = this.token.url.substring(\r\n        0,\r\n        this.token.url.length - METADATA_FILE.length\r\n      );\r\n      return resolveProtocol(activeConf, dir) + this.metadata.mediaURL();\r\n    }\r\n\r\n    // give up\r\n    return url;\r\n  }\r\n}\r\n","import {Token, JSON_TYPE, METADATA_FILE} from './nft'\r\nimport { sha256 } from 'js-sha256'\r\n\r\nexport type Properties = {\r\n    [key: string]: string | number\r\n}\r\n\r\nexport type LocalizationIntegrity = {\r\n    [key: string]: string \r\n}\r\n\r\nexport type Localization = {\r\n    uri: string \r\n    default: string \r\n    locales: string[] \r\n    integrity?: LocalizationIntegrity\r\n}\r\n\r\n// Just takes the first chunk of the mimetype (the type)\r\nexport function getTypeFromMimeType(filetype: string): string {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [type, _] = filetype.split(\"/\")\r\n    return type\r\n}\r\n\r\nfunction omitRawAndEmpty(k,v){\r\n    if(k === \"_raw\") return undefined;\r\n    if(v === \"\") return undefined;\r\n    return v\r\n}\r\n\r\nexport class Metadata {\r\n    _raw: string = undefined\r\n\r\n    name: string = \"\"\r\n    description: string = \"\"\r\n\r\n    image: string = \"\"\r\n    decimals?: number = 0\r\n    unitName?: string = \"\"\r\n    image_integrity?: string = \"\"\r\n    image_mimetype?: string = \"\"\r\n\r\n    background_color?: string = \"\"\r\n    external_url?: string = \"\"\r\n    external_url_integrity?: string = \"\"\r\n    external_url_mimetype?: string = \"\"\r\n\r\n    animation_url?: string = \"\"\r\n    animation_url_integrity?: string = \"\"\r\n    animation_url_mimetype?: string = \"\"\r\n\r\n    extra_metadata?: string = \"\"\r\n\r\n    localization?: Localization\r\n\r\n    properties?: Properties\r\n\r\n    constructor(args: any = {}) { Object.assign(this, args) }\r\n\r\n    toHash(fmt: Boolean = false): Uint8Array {\r\n        if(this.hasOwnProperty(\"extra_metadata\")){\r\n            //TODO\r\n            //am = SHA-512/256(\"arc0003/am\" || SHA-512/256(\"arc0003/amj\" || content of JSON metadata file) || e)\r\n        }\r\n\r\n        if(this._raw === undefined) \r\n            this._raw = this.toString(false)\r\n\r\n        const hash = sha256.create();\r\n        fmt ? hash.update(this.toString(false)):hash.update(this._raw);\r\n        return new Uint8Array(hash.digest())\r\n    }\r\n\r\n    valid(): boolean {\r\n        return this.image !== \"\"\r\n    }\r\n\r\n    toFile(): File {\r\n        const md_blob = new Blob([this.toString()], { type: JSON_TYPE })\r\n        return new File([md_blob], METADATA_FILE)\r\n    }\r\n\r\n    title(): string {\r\n        if(this.properties !== undefined && 'title' in this.properties) return this.properties.title.toString()\r\n        return this.name\r\n    }\r\n\r\n    toString(fmt: Boolean = false): string {\r\n        if(this._raw === undefined) this._raw = JSON.stringify({...this}, omitRawAndEmpty)\r\n        return JSON.stringify(JSON.parse(this._raw) , omitRawAndEmpty, fmt?2:0)\r\n    }\r\n\r\n\r\n    mimeType(): string {\r\n        if(this.animation_url !== \"\") return this.animation_url_mimetype;\r\n        if(this.external_url_mimetype !== \"\") return this.external_url_mimetype;\r\n        return this.image_mimetype\r\n    }\r\n\r\n    mediaType(): string {\r\n        return getTypeFromMimeType(this.mimeType())\r\n    }\r\n\r\n    mediaURL(): string {\r\n        if(this.animation_url !== \"\") {\r\n            return this.animation_url\r\n        }\r\n        return this.image\r\n    }\r\n\r\n\r\n    static fromToken(t: Token){\r\n        return new Metadata({name:t.name, image: t.url, decimals: t.decimals })\r\n    }\r\n}\r\n","type Config = {\r\n    network: string;       // The network to use for creating nfts\r\n    storageToken: string;  // The token provided by web3.storage\r\n    ipfsGateway: string;   // The IPFS gateway url for retrieving files\r\n    algod: string          // The Algod api url to use\r\n    blockExplorer: string; // The Block Explorer to allow linking out to\r\n}\r\n\r\ntype EventConfig = {\r\n    creator: string;\r\n    event: string;\r\n    title: string;\r\n    date: string;\r\n    asaList: number[];\r\n};\r\n\r\n\r\nexport const conf = require(\"../config.json\") as Config[];\r\nexport const eventConfs = require(\"../event_config.json\") as EventConfig[];\r\n\r\nexport function getAddrUrl(idx: number, addr: string): string {\r\n    return conf[idx].blockExplorer + \"address/\" + addr\r\n}\r\nexport function getAsaUrl(idx: number, id: number): string {\r\n    return conf[idx].blockExplorer + \"asset/\" + id \r\n}\r\n\r\nconst activeConfKey = \"active-conf\"\r\nexport function sessionGetActiveConf(): number {\r\n    const ac = sessionStorage.getItem(activeConfKey)\r\n    if(ac === undefined || ac === null) return 0\r\n    return parseInt(ac)\r\n}\r\n\r\nexport function sessionSetActiveConf(ac: number)  {\r\n    sessionStorage.setItem(activeConfKey, ac.toString())\r\n}\r\n\r\nexport function getEventConfig(name: string): EventConfig {\r\n    for(const ec of eventConfs){\r\n        if (ec.event === name) return ec;\r\n    }\r\n    return undefined;\r\n}","import { ipfsURL, mediaIntegrity } from './nft'\r\nimport { Metadata } from './metadata'\r\nimport { conf } from './config'\r\n\r\n/*\r\n Currently an issue with resolving ipfs-car module in web3.storage when using react-scripts\r\n We just use the prebuilt one but with no types we have to just ignore the issue for now\r\n//import { Web3Storage } from 'web3.storage'\r\n*/\r\n// @ts-ignore\r\nimport { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'\r\n\r\n\r\nlet storageClient = undefined\r\nfunction getStorageClient(activeConf: number): Web3Storage {\r\n    if (storageClient === undefined) {\r\n        storageClient = new Web3Storage({ token: process.env.REACT_APP_WEB3_STORAGE_TOKEN })\r\n    }\r\n    return storageClient\r\n}\r\n\r\nexport async function putToIPFS(activeConf: number, file: File, md: Metadata): Promise<string> {\r\n    const storage = getStorageClient(activeConf)\r\n    const mediaAdded = await storage.put([file], { wrapWithDirectory: false })\r\n\r\n    const integ = await mediaIntegrity(file)\r\n\r\n    const mdc = { ...md }\r\n    switch (md.mediaType()) {\r\n        case 'image':\r\n            mdc.image = ipfsURL(mediaAdded)\r\n            mdc.image_integrity = integ\r\n            break\r\n        case 'audio':\r\n            mdc.animation_url = ipfsURL(mediaAdded)\r\n            mdc.animation_url_integrity = integ\r\n            break\r\n        case 'video':\r\n            mdc.animation_url = ipfsURL(mediaAdded)\r\n            mdc.animation_url_integrity = integ\r\n            break\r\n    }\r\n\r\n    const mdobj = new Metadata(mdc)\r\n\r\n    return await storage.put([mdobj.toFile()], { wrapWithDirectory: false })\r\n}\r\n\r\nexport async function listRecentFiles(activeConf: number, ms_threshold: number): Promise<any[]> {\r\n    const w3s = getStorageClient(activeConf)\r\n    const options = []\r\n    for await (const upload of w3s.list({ maxResults: 20 })) {\r\n        const itemCreatedAt = new Date(upload.created);\r\n        if (itemCreatedAt >= new Date(process.env.REACT_APP_SHOW_ITEMS_CREATED_AFTER) || !process.env.REACT_APP_SHOW_ITEMS_CREATED_AFTER) {\r\n            options.push(upload)\r\n        }\r\n    }\r\n    return options\r\n}\r\n\r\nexport function getIpfsUrlFromCID(activeConf: number, cid: string): string {\r\n    return conf[activeConf].ipfsGateway + cid\r\n}\r\n\r\nexport async function getMimeTypeFromIpfs(url: string): Promise<string> {\r\n    const req = new Request(url, { method: \"HEAD\" })\r\n    const resp = await fetch(req)\r\n    return resp.headers.get(\"Content-Type\")\r\n}\r\n\r\n\r\nexport async function getMetaFromIpfs(url: string): Promise<Metadata> {\r\n    try {\r\n        const req = new Request(url)\r\n        const resp = await fetch(req)\r\n        const body = await resp.blob()\r\n        const text = await body.text()\r\n        const parsed = JSON.parse(text)\r\n        return new Metadata({ \"_raw\": text, ...parsed })\r\n    } catch (e) {\r\n        console.error(e)\r\n    }\r\n\r\n    return new Metadata({})\r\n}","import { getTypeFromMimeType } from \"./lib/metadata\"\r\n\r\ntype MediaDisplayProps = {\r\n    name: string\r\n    title: string\r\n    mimeType: string\r\n    mediaSrc: string | undefined\r\n    unitName: string\r\n}\r\n\r\nexport function MediaDisplay(props: MediaDisplayProps){\r\n    const type = getTypeFromMimeType(props.mimeType)\r\n\r\n    let media = <div></div>\r\n    switch(type) {\r\n        case \"audio\":\r\n           media = (\r\n                <audio id=\"uploaded-media\" controls >\r\n                    <source src={props.mediaSrc} type={props.mimeType} />\r\n                </audio>\r\n            )\r\n            break;\r\n        case \"video\":\r\n            media = (\r\n                <video id=\"uploaded-media\" controls>\r\n                    <source src={props.mediaSrc} type={props.mimeType} />\r\n                </video>\r\n            )\r\n            break;\r\n        default:\r\n            media = (\r\n                <img id=\"uploaded-media\" alt=\"NFT\" src={props.mediaSrc} />\r\n            )\r\n    }\r\n\r\n    return (\r\n        <div className='media-display container'>\r\n\r\n            <h1>{props.title}</h1>\r\n            <div className='content' > \r\n                {media}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { Card, Elevation } from \"@blueprintjs/core\";\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport React from \"react\";\r\nimport { Metadata } from \"./lib/metadata\";\r\nimport { resolveProtocol } from \"./lib/nft\";\r\nimport {\r\n  getIpfsUrlFromCID,\r\n  getMetaFromIpfs,\r\n  getMimeTypeFromIpfs,\r\n  listRecentFiles,\r\n} from \"./lib/ipfs\";\r\nimport { SessionWallet } from \"algorand-session-wallet\";\r\nimport { MediaDisplay } from \"./MediaDisplay\";\r\nimport { isTemplateLiteral } from \"typescript\";\r\n\r\ntype PickerProps = {\r\n  activeConfig: number;\r\n  sw: SessionWallet\r\n};\r\n\r\n// 2 hours\r\nconst MAX_DELTA = 60 * 60 * 4 * 1000;\r\nlet cards = [];\r\n\r\nexport default function Picker(props: PickerProps) {\r\n  const [options, setOptions] = React.useState([]);\r\n  const [initialized, setInitialized] = React.useState(false);\r\n\r\n\r\n  async function getRecentFiles(activeConfig: number): Promise<CIDMD[]> {\r\n    const opts = await listRecentFiles(activeConfig, MAX_DELTA)\r\n\r\n    const mime_type_promises = []\r\n    for (const opt of opts) {\r\n      mime_type_promises.push(getMimeTypeFromIpfs(getIpfsUrlFromCID(props.activeConfig, opt.cid)))\r\n    }\r\n\r\n    const mimeTypes = await Promise.all(mime_type_promises)\r\n\r\n    const new_opts = []\r\n    const md_promises = [];\r\n    for (const idx in opts) {\r\n      if (mimeTypes[idx] === \"application/json\"){\r\n        md_promises.push(\r\n          getMetaFromIpfs(getIpfsUrlFromCID(props.activeConfig, opts[idx].cid))\r\n        );\r\n        new_opts.push(opts[idx])\r\n\r\n      }\r\n    }\r\n\r\n    const metas = await Promise.all(md_promises)\r\n    const filtered = [];\r\n    for (const idx in metas) {\r\n      if (metas[idx].name === \"\") continue;\r\n\r\n      filtered.push({\r\n        cid: new_opts[idx].cid,\r\n        md: metas[idx]\r\n      } as CIDMD);\r\n    }\r\n\r\n    return filtered\r\n  }\r\n\r\n  // Look at recent\r\n  React.useEffect(() => {\r\n    if (initialized) return;\r\n    getRecentFiles(props.activeConfig).then((filtered) => {\r\n      setOptions(filtered);\r\n      setInitialized(true);\r\n    })\r\n  }, [props.activeConfig, initialized]);\r\n\r\n  \r\n  if(initialized) {\r\n    cards = options.map((option) => {\r\n      return <DisplayCard key={option.cid} cidmd={option} />;\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n        {\r\n          !props.sw.connected() ? <h2 className=\"warn-mssg\">Please connect your wallet to mint NFTs</h2> : <div className=\"content content-collection\">{!cards.length ? [<h5 key='loading'>Loading...</h5>] : cards}</div>\r\n        }\r\n    </div>\r\n  );\r\n}\r\n\r\ntype CIDMD = {\r\n  cid: string\r\n  md: Metadata\r\n}\r\n\r\ntype DisplayCardProps = {\r\n  cidmd: CIDMD;\r\n};\r\n\r\nfunction DisplayCard(props: DisplayCardProps) {\r\n  return (\r\n\r\n    <Link to={'/mint/' + props.cidmd.cid}>\r\n      <Card\r\n        className=\"content-collection-item\"\r\n        elevation={Elevation.TWO}\r\n      >\r\n          <MediaDisplay\r\n            unitName={props.cidmd.md.unitName}\r\n            name={props.cidmd.md.description}\r\n            title={props.cidmd.md.title().split(\".\")[0]}\r\n            mediaSrc={resolveProtocol(0, props.cidmd.md.mediaURL())}\r\n            mimeType={props.cidmd.md.mimeType()}\r\n          />\r\n      </Card>\r\n    </Link>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { Button, Elevation, FileInput, Card} from \"@blueprintjs/core\"\r\nimport { getTypeFromMimeType, Metadata} from './lib/metadata'\r\nimport { putToIPFS } from './lib/ipfs'\r\nimport { MediaDisplay } from './MediaDisplay'\r\n\r\ntype UploaderProps = {\r\n    activeConfig: number\r\n}\r\n\r\nexport function Uploader(props: UploaderProps) {\r\n\r\n    const [meta, setMeta]               = React.useState(new Metadata())\r\n    const [title, setTitle]             = React.useState<string>();\r\n    const [loading, setLoading]         = React.useState(false)\r\n    const [fileObj, setFileObj]         = React.useState<File>();\r\n    const [mediaSrc, setMediaSrc]       = React.useState<string>();\r\n    const [mimeType, setMimeType]       = React.useState<string>();\r\n    const [unitName, setUnitName]       = React.useState<string>();\r\n    const [assetName, setAssetName]     = React.useState<string>();\r\n    const form = {\r\n        unitName: {\r\n            set: setUnitName,\r\n            get: unitName\r\n        },\r\n        assetName: {\r\n            set: setAssetName,\r\n            get: assetName\r\n        },\r\n    }\r\n\r\n    function setFile(file: File) {\r\n        setFileObj(file)\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e: any) => {  setMediaSrc(e.target.result) }\r\n        reader.readAsDataURL(file);\r\n\r\n        setMimeType(file.type)\r\n        setTitle(file.name)\r\n\r\n        setMeta((meta)=>{\r\n            const metaObj = {\r\n                ...meta,\r\n                properties:{...meta.properties, size:file.size, title:file.name}\r\n            }\r\n\r\n            const mediaType = getTypeFromMimeType(file.type)\r\n            switch(mediaType){\r\n                case 'audio':\r\n                    metaObj.animation_url = file.name\r\n                    metaObj.animation_url_mimetype = file.type\r\n                    break;\r\n                case 'video':\r\n                    metaObj.animation_url = file.name\r\n                    metaObj.animation_url_mimetype = file.type\r\n                    break;\r\n                case 'image':\r\n                    metaObj.image = file.name\r\n                    metaObj.image_mimetype = file.type\r\n                    break;\r\n            }\r\n\r\n            return new Metadata(metaObj)\r\n        })\r\n    }\r\n\r\n    async function uploadMedia() {\r\n        setLoading(true)\r\n        \r\n        if(unitName.length > 8) {\r\n            alert(\"Unit name MUST be 8 bytes or less\");\r\n            setLoading(false);\r\n        }\r\n\r\n        const md = new Metadata({\r\n            ...meta,\r\n            name: assetName,\r\n            unitName: unitName,\r\n            description:`POAP Minted at ${process.env.REACT_APP_EVENT_NAME} ${new Date().getFullYear()}`,\r\n            decimals: 0,\r\n        }) \r\n        setMeta(md)\r\n\r\n        try {\r\n            await putToIPFS(props.activeConfig, fileObj, md)\r\n            setLoading(false)\r\n            window.location.reload()\r\n        } catch (error) {\r\n            console.error(error)\r\n            alert(\"Failed to upload image to ipfs :(\")\r\n            setLoading(false)\r\n            return\r\n        }\r\n    }\r\n\r\n    function onInputChange(event) {\r\n        form[event.target.name].set(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <Card elevation={Elevation.TWO} className='mint-card' >\r\n                <UploadContainer mediaTitle={title} mimeType={mimeType} mediaSrc={mediaSrc} setFile={setFile} {...meta} />\r\n                <input name='assetName' onChange={onInputChange} placeholder=\"Asset Name\"></input>\r\n                <input name='unitName' onChange={onInputChange} placeholder=\"Unit name\"></input>\r\n                <Button intent='success' style={{float:'right', margin:\"15px\"}} loading={loading} onClick={uploadMedia}>Upload</Button>\r\n            </Card>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\ntype UploaderContainerProps = {\r\n    mediaTitle: string | undefined\r\n    mediaSrc: string | undefined\r\n    mimeType: string | undefined\r\n    setFile(f: File): void\r\n};\r\n\r\nfunction UploadContainer(props: UploaderContainerProps) {\r\n    function captureFile(event: any) {\r\n        event.stopPropagation()\r\n        event.preventDefault()\r\n        props.setFile(event.target.files.item(0))\r\n    }\r\n\r\n    if (props.mediaSrc === undefined || props.mediaSrc === \"\" ) return (\r\n        <div className='container'>\r\n            <div className='content content-piece' >\r\n                <FileInput large={true} disabled={false} text=\"Choose file...\" onInputChange={captureFile} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className='container' >\r\n            <div className='content content-piece'>\r\n                <MediaDisplay unitName={\"\"} name={\"\"} title={props.mediaTitle} mimeType={props.mimeType} mediaSrc={props.mediaSrc} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { SessionWallet } from 'algorand-session-wallet'\r\nimport QrScanner from \"qr-scanner\";\r\nimport {useParams} from 'react-router-dom'\r\nimport React from 'react'\r\nimport { NFT, resolveProtocol} from './lib/nft'\r\nimport { Metadata } from './lib/metadata'\r\nimport { getIpfsUrlFromCID, getMetaFromIpfs } from './lib/ipfs'\r\nimport {fundAccount, xferAsset} from './lib/algorand'\r\nimport { Button, Card, Dialog, Elevation } from '@blueprintjs/core'\r\nimport QRCode from \"react-qr-code\";\r\nimport algosdk, {secretKeyToMnemonic } from 'algosdk'\r\nimport { DIALOG_BODY, DIALOG_FOOTER } from '@blueprintjs/core/lib/esm/common/classes'\r\nimport { MediaDisplay } from './MediaDisplay';\r\n\r\nQrScanner.WORKER_PATH = \"/qr-scanner-worker.min.js\"\r\n\r\nexport type MinterProps = { \r\n    activeConfig: number \r\n    sw: SessionWallet\r\n}\r\n\r\nexport function Minter(props: MinterProps){\r\n    // Mint the chosen nft image with our minting account\r\n    const {cid} = useParams()\r\n    const [md, setMd] = React.useState(new Metadata({}))\r\n    const [importingAccount, setImportingAccount] = React.useState(undefined)\r\n    const [nft, setNFT] = React.useState(undefined)\r\n    const [fundLoading, setFundLoading] = React.useState(false)\r\n    const [loading, setLoading] = React.useState(false)\r\n    const [popupOpen,setPopupOpen] = React.useState(false)\r\n\r\n    const [createdId, setCreatedId] = React.useState(0)\r\n\r\n    function resetAllStates(errorMssg?: string) {\r\n        if(errorMssg) {\r\n            alert(errorMssg);\r\n        }\r\n        setImportingAccount(undefined);\r\n        setNFT(undefined);\r\n        setFundLoading(false);\r\n        setLoading(false);\r\n        setPopupOpen(false);\r\n        setCreatedId(0);\r\n    }\r\n\r\n    React.useEffect(()=>{\r\n        if(md._raw === undefined)\r\n            getMetaFromIpfs(getIpfsUrlFromCID(props.activeConfig, cid)).then((md)=>{\r\n                setMd(md)\r\n            })\r\n    }, [props.activeConfig, cid, md])\r\n\r\n    async function mintOnly(){\r\n        try {\r\n            // Create ASA with our user\r\n            setLoading(true)\r\n            const result = await NFT.create(props.sw.wallet, props.activeConfig,  md, cid)\r\n            setNFT(result)\r\n            setCreatedId(result.id())\r\n        } catch (error) {\r\n            resetAllStates(error);\r\n        }\r\n    }\r\n\r\n    async function handleScannedAccount(addr: string){\r\n        // Fires after successful scan of addr\r\n        await xferAsset(props.sw.wallet, props.activeConfig, addr, createdId)\r\n        setCreatedId(0)\r\n        setLoading(false)\r\n        window.location.href=\"/\"\r\n    }\r\n\r\n    async function mintAndCreate(){\r\n        // Create account\r\n        setLoading(true)\r\n        const acct = algosdk.generateAccount()\r\n        setImportingAccount(acct)\r\n    }\r\n\r\n    function cancelCreate() { \r\n        setLoading(false)\r\n        setImportingAccount(undefined) \r\n    }\r\n\r\n    async function continueCreate() {\r\n        try {\r\n            const result = await NFT.create(props.sw.wallet, props.activeConfig,  md, cid)\r\n            setNFT(result)\r\n            setPopupOpen(true)\r\n        } catch (error) {\r\n            resetAllStates(error);\r\n        }\r\n    }\r\n\r\n    async function fundIt(){\r\n        try {\r\n            // User has scanned it, issue grouped transactions\r\n            setFundLoading(true)\r\n\r\n            await fundAccount(props.sw.wallet, props.activeConfig, importingAccount, nft.id())\r\n                        \r\n            // Unset\r\n            setImportingAccount(undefined)\r\n            setFundLoading(false)\r\n            setLoading(false)\r\n            window.location.href=\"/\"\r\n        } catch (error) {\r\n            resetAllStates(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <NFTCard loading={loading} cid={cid} md={md} mintOnly={mintOnly} mintAndCreate={mintAndCreate}></NFTCard>\r\n            <AccountImporter importingAccount={importingAccount} cancelCreate={cancelCreate} continueCreate={continueCreate}/>\r\n            <AddressReader  optIn={createdId} handleScanned={handleScannedAccount}></AddressReader>\r\n            <Dialog isOpen={popupOpen} >\r\n                <div className={DIALOG_BODY}>\r\n                    <div className='container'>\r\n                        <Button loading={fundLoading} intent='success' onClick={fundIt}>Fund it!</Button>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface NFTCardProps {\r\n    cid: string\r\n    md: Metadata\r\n    loading: boolean\r\n    mintOnly()\r\n    mintAndCreate()\r\n}\r\n\r\nfunction NFTCard(props: NFTCardProps) {\r\n    return (\r\n        <Card className=\"tt-bkg-theme\" elevation={Elevation.THREE} >\r\n            <MediaDisplay \r\n                unitName={props.md.unitName}\r\n                name={props.md.description}\r\n                title={props.md.title().split(\".\")[0]}\r\n                mediaSrc={resolveProtocol(0, props.md.mediaURL())} \r\n                mimeType={props.md.mimeType()} \r\n            />\r\n            <div className='container'>\r\n                <Button icon='clean' intent='success' onClick={props.mintAndCreate}>Setup account</Button>\r\n                <Button icon='clean' intent='success' onClick={props.mintOnly}>Send to existing account</Button>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\ninterface AccountImporterProps {\r\n    importingAccount: algosdk.Account \r\n    continueCreate()\r\n    cancelCreate()\r\n}\r\n\r\nfunction AccountImporter(props: AccountImporterProps) {\r\n    const [isOpen, setIsOpen] = React.useState(false)\r\n    const [mn, setMn]  = React.useState(\"\")\r\n\r\n    const ic = props.importingAccount\r\n    React.useEffect(()=>{\r\n        if(ic !== undefined){\r\n            setMn(JSON.stringify({\r\n                \"version\":\"1.0\", \r\n                \"mnemonic\":secretKeyToMnemonic(ic.sk)\r\n            }))\r\n            setIsOpen(true)\r\n        }\r\n    }, [ic])\r\n\r\n    function cancelCreate(){\r\n        setIsOpen(false)\r\n        props.cancelCreate()\r\n    }\r\n    function continueCreate(){\r\n        setIsOpen(false)\r\n        props.continueCreate()\r\n    }\r\n\r\n    return (\r\n        <Dialog isOpen={isOpen} className='content' >\r\n            <div className={DIALOG_BODY} >\r\n                <QRCode  value={mn} />\r\n            </div>\r\n            <div className={DIALOG_FOOTER} >\r\n                <div className='container'>\r\n                    <Button style={{margin:\"0px 10px\"}} intent='danger' onClick={cancelCreate}>Cancel</Button>\r\n                    <Button style={{margin:\"0px 10px\"}} intent='success' onClick={continueCreate}>Ready!</Button>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport interface AddressReaderProps {\r\n    optIn: number \r\n    handleScanned(addr: string): void\r\n}\r\n\r\nexport function AddressReader(props: AddressReaderProps) {\r\n    const vref = React.useRef<HTMLVideoElement>(null)\r\n    const [scanner, setScanner] = React.useState<QrScanner | undefined>(undefined)\r\n    const [isOpen, setIsOpen] = React.useState(false)\r\n\r\n    const open = props.optIn !== undefined && props.optIn>0\r\n    React.useEffect(()=>{\r\n        setIsOpen(open)\r\n        scanner?.stop()\r\n        scanner?.start()\r\n    }, [scanner, open])\r\n\r\n    let seen = \"\"\r\n    function initCam(){\r\n        function handleScanned(data: string){\r\n            if(seen === data) return\r\n\r\n            scanner?.stop()\r\n            vref.current = null\r\n            setScanner(undefined)\r\n            setIsOpen(false)\r\n            seen = data\r\n            props.handleScanned(data)\r\n        }\r\n\r\n        if(vref.current !== null && scanner === undefined)\r\n           setScanner(new QrScanner(vref.current,handleScanned))\r\n    }\r\n\r\n    return (\r\n        <Dialog isOpen={isOpen} onOpened={initCam}>\r\n            <div className={DIALOG_BODY}>\r\n                <h3>Please Opt into Asset ID {props.optIn}</h3>\r\n                <div className='scanner-container'>\r\n                    <video style={{width: '100%'}} ref={vref}></video>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    )\r\n}","\r\nimport { useParams } from 'react-router-dom'\r\nimport { Card, Elevation } from \"@blueprintjs/core\";\r\nimport React from \"react\";\r\nimport { NFT, resolveProtocol } from \"./lib/nft\"\r\nimport { getEventConfig } from \"./lib/config\"\r\nimport { MediaDisplay } from \"./MediaDisplay\";\r\n\r\ntype EventMintsProps = {\r\n    activeConfig: number;\r\n};\r\n\r\n\r\nexport default function EventMints(props: EventMintsProps) {\r\n    const [nfts, setNfts] = React.useState([])\r\n    const [loadedName, setLoadedName] = React.useState(undefined)\r\n    const { name } = useParams()\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (nfts.length > 0 && loadedName === name) return;\r\n\r\n        const ec = getEventConfig(name)\r\n\r\n        const nftPromises = []\r\n        for (const asa of ec.asaList) {\r\n            nftPromises.push(NFT.fromAssetId(props.activeConfig, asa))\r\n        }\r\n        Promise.all(nftPromises).then((n) => {\r\n            setNfts(n)\r\n            setLoadedName(name)\r\n        })\r\n    })\r\n\r\n    const nftList = nfts.length === 0 || name !== loadedName ? [<h1 key='loading'>Loading...</h1>] : nfts.map((nft: NFT) => {\r\n        return (\r\n            <Card\r\n                key={nft.id()}\r\n                className=\"content-collection-item\"\r\n                elevation={Elevation.TWO}\r\n            >\r\n                <MediaDisplay\r\n                    unitName={nft.metadata.unitName}\r\n                    title={nft.metadata.title()}\r\n                    name={nft.name()}\r\n                    mediaSrc={resolveProtocol(props.activeConfig, nft.metadata.mediaURL())}\r\n                    mimeType={nft.metadata.mimeType()}\r\n                />\r\n            </Card>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className='container'>\r\n            {nftList}\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react'\r\n\r\nimport { SessionWallet, allowedWallets } from 'algorand-session-wallet'\r\n\r\nimport { Dialog, Button, Classes, HTMLSelect, Intent } from '@blueprintjs/core'\r\nimport { IconName } from '@blueprintjs/icons'\r\n\r\n\r\ntype AlgorandWalletConnectorProps = {\r\n    darkMode: boolean\r\n    connected: boolean\r\n    accts: string[]\r\n    sessionWallet: SessionWallet\r\n    updateWallet(sw: SessionWallet): void\r\n}\r\n\r\nexport default function AlgorandWalletConnector(props:AlgorandWalletConnectorProps)  {\r\n\r\n    const [selectorOpen, setSelectorOpen] = React.useState(false)\r\n\r\n    const {sessionWallet,updateWallet} = props\r\n    React.useEffect(()=>{\r\n        if(sessionWallet.connected()) return\r\n\r\n        let interval: any\r\n        sessionWallet.connect().then((success)=>{\r\n            if(!success) return\r\n\r\n            // Check every 500ms to see if we've connected then kill the interval\r\n            // This is most useful in the case of walletconnect where it may be several \r\n            // seconds before the user connects\r\n            interval = setInterval(()=>{\r\n                if(sessionWallet.connected()) {\r\n                    clearInterval(interval)\r\n                    updateWallet(sessionWallet)\r\n                }\r\n            }, 500)\r\n\r\n        })\r\n\r\n        return ()=>{ clearInterval(interval) }\r\n\r\n    }, [sessionWallet, updateWallet])\r\n\r\n\r\n    function disconnectWallet() { \r\n        props.sessionWallet.disconnect()\r\n        props.updateWallet(new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback)) \r\n    }\r\n\r\n    function handleDisplayWalletSelection() { setSelectorOpen(true) }\r\n\r\n    async function handleSelectedWallet(e: any) {\r\n        const choice = e.currentTarget.id\r\n\r\n        if(!(choice in allowedWallets)) {\r\n            if(props.sessionWallet.wallet !== undefined) props.sessionWallet.disconnect()\r\n            return setSelectorOpen(false)\r\n        }\r\n\r\n        const sw = new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback, choice)\r\n\r\n        if(!await sw.connect()) {\r\n            sw.disconnect()\r\n        }\r\n\r\n        props.updateWallet(sw)\r\n\r\n        setSelectorOpen(false)\r\n    }\r\n\r\n    function handleChangeAccount(e: any) {\r\n        props.sessionWallet.setAccountIndex(parseInt(e.target.value))\r\n        props.updateWallet(props.sessionWallet)\r\n    }\r\n\r\n    const walletOptions = []\r\n    for(const [k,v] of Object.entries(allowedWallets)){\r\n        walletOptions.push((\r\n        <li key={k}>\r\n            <Button id={k}\r\n                large={true} \r\n                fill={true} \r\n                minimal={true} \r\n                outlined={true}\r\n                onClick={handleSelectedWallet}\r\n                > \r\n                <div className='wallet-option'>\r\n                    <img alt='wallet-branding' className='wallet-branding' src={  v.img(props.darkMode)} />\r\n                    <h5>{v.displayName()}</h5>\r\n                </div>\r\n                </Button>\r\n        </li>\r\n        ))\r\n    }\r\n\r\n    if (!props.connected) return (\r\n        <div>\r\n            <Button\r\n                rightIcon='selection'\r\n                intent='success'\r\n                onClick={handleDisplayWalletSelection}>Connect Wallet</Button>\r\n\r\n            <Dialog isOpen={selectorOpen} title='Select Wallet' onClose={handleSelectedWallet} >\r\n                <div className={Classes.DIALOG_BODY}>\r\n                    <ul className='wallet-option-list'>\r\n                        {walletOptions}\r\n                    </ul>\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n\r\n\r\n    const addr_list = props.accts.map((addr, idx) => {\r\n        return (<option value={idx} key={idx}> {addr.substr(0, 8)}...  </option>)\r\n    })\r\n\r\n    const iconprops = { \r\n        icon: 'symbol-circle' as IconName, \r\n        intent: 'success'  as Intent\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HTMLSelect \r\n                onChange={handleChangeAccount} \r\n                minimal={true}\r\n                className=\"wallet-select-list\"\r\n                iconProps={iconprops} \r\n                defaultValue={props.sessionWallet.accountIndex()} >\r\n                {addr_list}\r\n            </HTMLSelect>\r\n            <Button icon='log-out' minimal={true} onClick={disconnectWallet} ></Button>\r\n        </div>\r\n    )\r\n}","import Picker from './Picker'\r\nimport './index.css';\r\nimport { Button, Alignment, Navbar } from '@blueprintjs/core';\r\nimport { SessionWallet } from 'algorand-session-wallet';\r\nimport {Uploader} from './Uploader'\r\nimport React from 'react';\r\nimport {Minter} from './Minter';\r\nimport EventMints from './EventMints';\r\nimport AlgorandWalletConnector from './AlgorandWalletConnector'\r\nimport { conf, sessionGetActiveConf } from './lib/config';\r\n\r\nimport {\r\n  Link,\r\n  Route,\r\n  Routes,\r\n} from 'react-router-dom'\r\n\r\n\r\ntype AppProps = {\r\n  history: any,\r\n}\r\n\r\nfunction App(props: AppProps) {\r\n\r\n  const activeConf = sessionGetActiveConf()\r\n  const sw = new SessionWallet(conf[activeConf].network)\r\n\r\n\r\n  const [sessionWallet, setSessionWallet] =  React.useState(sw)\r\n  const [accts, setAccounts] = React.useState(sw.accountList())\r\n  const [connected, setConnected] = React.useState(sw.connected())\r\n\r\n  function updateWallet(sw: SessionWallet){ \r\n    setSessionWallet(sw)\r\n    setAccounts(sw.accountList())\r\n    setConnected(sw.connected())\r\n  }\r\n\r\n  const events = [];\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <Navbar className='tt-bkg-theme'>\r\n        <Navbar.Group align={Alignment.LEFT}>\r\n          <Navbar.Heading>\r\n            <img className=\"tt-logo\" src=\"https://src.trantorian.com/img/assets/trantorian-logo.png\" alt=\"logo\" />\r\n          </Navbar.Heading>\r\n          <Navbar.Divider />\r\n          <Link to='/'><Button className='navbar-btn' minimal={true} icon='search'>Choose</Button></Link>\r\n          <Link to='/upload'><Button className='navbar-btn' minimal={true} icon='upload'>Upload</Button></Link>\r\n        </Navbar.Group>\r\n        <Navbar.Group align={Alignment.LEFT}>\r\n          <Navbar.Divider />\r\n          {events}\r\n        </Navbar.Group>\r\n        <Navbar.Group  align={Alignment.RIGHT}>\r\n          <AlgorandWalletConnector  \r\n            darkMode={false}\r\n            sessionWallet={sessionWallet}\r\n            accts={accts}\r\n            connected={connected} \r\n            updateWallet={updateWallet}\r\n          />\r\n        </Navbar.Group>\r\n        <Navbar.Group  align={Alignment.RIGHT}>\r\n          <div className='network-name'><b>{conf[activeConf].network}</b></div>\r\n        </Navbar.Group>\r\n        </Navbar>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Picker  activeConfig={activeConf} sw={sessionWallet}></Picker>} />\r\n          <Route path=\"/mint/:cid\" element={ <Minter  activeConfig={activeConf} sw={sessionWallet}></Minter> }/>\r\n          <Route path=\"/upload\" element={ <Uploader  activeConfig={activeConf} ></Uploader> }/>\r\n          <Route path=\"/event/:name\" element={ <EventMints  activeConfig={activeConf} ></EventMints> }/>\r\n        </Routes>\r\n      </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\n\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport {createBrowserHistory} from \"history\"\r\nimport { sessionSetActiveConf } from './lib/config';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nsessionSetActiveConf(parseInt(process.env.REACT_APP_NETWORK_TO_USE));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router >\r\n      <App history={history}  />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);","import { Wallet } from \"algorand-session-wallet\";\r\nimport algosdk, {\r\n  Algodv2,\r\n  waitForConfirmation,\r\n  makeAssetCreateTxnWithSuggestedParamsFromObject,\r\n  makeAssetTransferTxnWithSuggestedParamsFromObject,\r\n  makePaymentTxnWithSuggestedParamsFromObject,\r\n} from \"algosdk\";\r\nimport { NFT } from \"./nft\";\r\nimport { Metadata } from \"./metadata\";\r\nimport { conf } from \"./config\";\r\n\r\nfunction getClient(activeConf: number): Algodv2 {\r\n  return new algosdk.Algodv2(\"\", conf[activeConf].algod, \"\");\r\n}\r\n\r\nexport async function createToken(\r\n  wallet: Wallet,\r\n  activeConf: number,\r\n  url: string,\r\n  md: Metadata\r\n): Promise<number> {\r\n  const addr = wallet.getDefaultAccount();\r\n  const suggested = await getSuggested(activeConf, 1000);\r\n\r\n  const create_txn = makeAssetCreateTxnWithSuggestedParamsFromObject({\r\n    from: addr,\r\n    assetName: md.name,\r\n    unitName: md.unitName,\r\n    assetURL: url,\r\n    assetMetadataHash: md.toHash(),\r\n    manager: addr,\r\n    total: 1,\r\n    decimals: 0,\r\n    defaultFrozen: false,\r\n    suggestedParams: suggested,\r\n  });\r\n\r\n  const [create_txn_s]  = await wallet.signTxn([create_txn])\r\n  const result = await sendWait(activeConf, [create_txn_s])\r\n  return result['asset-index']\r\n}\r\n\r\nexport async function fundAccount(\r\n  wallet: Wallet,\r\n  activeConf: number,\r\n  acct: algosdk.Account,\r\n  id: number\r\n) {\r\n  const addr = wallet.getDefaultAccount();\r\n  const suggested = await getSuggested(activeConf, 100);\r\n\r\n  const fund_txn = makePaymentTxnWithSuggestedParamsFromObject({\r\n    from: addr,\r\n    to: acct.addr,\r\n    amount: 3e5,\r\n    suggestedParams: suggested,\r\n  });\r\n\r\n  const optin_txn = makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n    from: acct.addr,\r\n    to: acct.addr,\r\n    assetIndex: id,\r\n    amount: 0,\r\n    suggestedParams: suggested,\r\n  });\r\n\r\n  const xfer_txn = makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n    from: addr,\r\n    to: acct.addr,\r\n    assetIndex: id,\r\n    amount: 1,\r\n    suggestedParams: suggested,\r\n  });\r\n\r\n\r\n  const grouped = [fund_txn, optin_txn, xfer_txn];\r\n  algosdk.assignGroupID(grouped);\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [fund_txn_s, _, xfer_txn_s] = await wallet.signTxn(grouped);\r\n  const optin_txn_s = algosdk.signTransaction(optin_txn, acct.sk);\r\n  await sendWait(activeConf, [fund_txn_s, optin_txn_s, xfer_txn_s]);\r\n}\r\n\r\nexport async function xferAsset(\r\n  wallet: Wallet,\r\n  activeConf: number,\r\n  rx: string,\r\n  id: number\r\n) {\r\n  const addr = wallet.getDefaultAccount();\r\n  const suggested = await getSuggested(activeConf, 100);\r\n\r\n  const xfer_txn = makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n    from: addr,\r\n    to: rx,\r\n    assetIndex: id,\r\n    amount: 1,\r\n    suggestedParams: suggested,\r\n  });\r\n\r\n  const [create_txn_s] = await wallet.signTxn([xfer_txn]);\r\n  await sendWait(activeConf, [create_txn_s]);\r\n}\r\n\r\nexport async function getSuggested(activeConf: number, rounds: number) {\r\n  const txParams = await getClient(activeConf).getTransactionParams().do();\r\n  return { ...txParams, lastRound: txParams[\"firstRound\"] + rounds };\r\n}\r\n\r\nexport async function getToken(\r\n  activeConf: number,\r\n  assetId: number\r\n): Promise<any> {\r\n  return await getClient(activeConf).getAssetByID(assetId).do();\r\n}\r\n\r\nexport async function getCollection(\r\n  activeConf: number,\r\n  address: string\r\n): Promise<any[]> {\r\n  const results = await getClient(activeConf).accountInformation(address).do();\r\n\r\n  const plist = [];\r\n  for (const a in results[\"assets\"]) {\r\n    if (results[\"assets\"][a][\"amount\"] > 0)\r\n      plist.push(getToken(activeConf, results[\"assets\"][a][\"asset-id\"]));\r\n  }\r\n\r\n  const assets = await Promise.all(plist);\r\n  const collectionRequests = assets.map((a) => {\r\n    return NFT.fromToken(activeConf, a);\r\n  });\r\n  return Promise.all(collectionRequests);\r\n}\r\n\r\nexport async function sendWait(\r\n  activeConf: number,\r\n  signed: any[]\r\n): Promise<any> {\r\n  const client = getClient(activeConf);\r\n  try {\r\n    const { txId } = await client\r\n      .sendRawTransaction( signed.map((t) => { return t.blob; }))\r\n      .do();\r\n    const result = await waitForConfirmation(client, txId, 3);\r\n    return result;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n\r\n  return undefined;\r\n}"],"sourceRoot":""}